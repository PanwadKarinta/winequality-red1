import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import gradio as gr

# -------------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
# -------------------------------
model_accuracy = 0.0
best_params = {}

try:
    df = pd.read_csv("winequality-red.csv")
    df["quality_label"] = df["quality"].apply(lambda v: 1 if v >= 7 else 0)

    X = df.drop(["quality", "quality_label"], axis=1)
    y = df["quality_label"]

    FEATURE_COLUMNS = list(X.columns)
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    X_train, X_test, y_train, y_test = train_test_split(
        X_scaled, y, test_size=0.1, random_state=42, stratify=y
    )

    param_grid = {
        "n_estimators": [100, 200],
        "max_depth": [10, 20, None],
        "min_samples_split": [2, 5],
        "min_samples_leaf": [1, 2],
    }
    rf = RandomForestClassifier(random_state=42)
    grid_search = GridSearchCV(
        rf, param_grid=param_grid, cv=3, n_jobs=-1, verbose=1
    )
    grid_search.fit(X_train, y_train)
    model = grid_search.best_estimator_
    best_params = grid_search.best_params_

    predictions = model.predict(X_test)
    model_accuracy = accuracy_score(y_test, predictions)

    print("‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ù‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    print(f"üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: {model_accuracy*100:.2f}%")
    print(f"Best Parameters: {best_params}")

except FileNotFoundError:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå winequality-red.csv")
    FEATURE_COLUMNS = [
        "fixed acidity", "volatile acidity", "citric acid", "residual sugar",
        "chlorides", "free sulfur dioxide", "total sulfur dioxide", "density",
        "ph", "sulphates", "alcohol"
    ]
    model = None
    scaler = None

# -------------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
# -------------------------------
def predict_quality(*features):
    if model is None or scaler is None:
        return "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•"
    try:
        features_dict = {col: val for col, val in zip(FEATURE_COLUMNS, features)}
        df_new = pd.DataFrame([features_dict])
        df_new = df_new[FEATURE_COLUMNS]
        scaled = scaler.transform(df_new)
        probs = model.predict_proba(scaled)[0]
        pred = np.argmax(probs)
        conf = probs[pred]
        text = "üç∑ ‡πÑ‡∏ß‡∏ô‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ" if pred == 1 else "‚ö†Ô∏è ‡πÑ‡∏ß‡∏ô‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏î‡∏µ"
        return f"{text} (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {conf:.2%})"
    except Exception as e:
        return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}"

# -------------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö Gradio (‡∏ò‡∏µ‡∏°‡πÑ‡∏ß‡∏ô‡πå‡πÄ‡∏Ç‡πâ‡∏°)
# -------------------------------
feature_translations = {
    "fixed acidity": "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏î‡∏Ñ‡∏á‡∏ó‡∏µ‡πà",
    "volatile acidity": "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏î‡∏£‡∏∞‡πÄ‡∏´‡∏¢",
    "citric acid": "‡∏Å‡∏£‡∏î‡∏ã‡∏¥‡∏ï‡∏£‡∏¥‡∏Å",
    "residual sugar": "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠",
    "chlorides": "‡∏Ñ‡∏•‡∏≠‡πÑ‡∏£‡∏î‡πå",
    "free sulfur dioxide": "‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏≠‡∏£‡πå‡πÑ‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏ã‡∏î‡πå‡∏≠‡∏¥‡∏™‡∏£‡∏∞",
    "total sulfur dioxide": "‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏≠‡∏£‡πå‡πÑ‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏ã‡∏î‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
    "density": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô",
    "ph": "‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏î-‡∏î‡πà‡∏≤‡∏á",
    "sulphates": "‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏ï",
    "alcohol": "‡∏î‡∏µ‡∏Å‡∏£‡∏µ‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå"
}

sample_good = [7.3, 0.65, 0.0, 1.2, 0.065, 15.0, 21.0, 0.9946, 3.39, 0.47, 10.0]
sample_bad = [6.0, 0.90, 0.00, 5.0, 0.10, 5.0, 15.0, 0.9970, 3.20, 0.40, 8.5]

with gr.Blocks(
    theme=gr.themes.Soft(primary_hue="rose", secondary_hue="rose")
) as demo:
    gr.HTML(
        """
        <div style='background-color:#1a001f;padding:20px;border-radius:15px;color:white;text-align:center'>
        <h1>üç∑ Grandeur Wine Analyzer</h1>
        <p>‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏ß‡∏ô‡πå</p>
        </div>
        """
    )

    gr.HTML(
        f"<div style='text-align:center;color:#d8a3ff;'><h3>üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•: {model_accuracy*100:.2f}%</h3></div>"
    )

    inputs_list = [
        gr.Number(
            label=f"{col.replace('_', ' ').title()} ({feature_translations.get(col, '')})",
            precision=3,
        )
        for col in FEATURE_COLUMNS
    ]

    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    gr.Examples(
        examples=[sample_good, sample_bad],
        inputs=inputs_list,
        label="üìç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏ß‡∏ô‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ / ‡πÑ‡∏ß‡∏ô‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏î‡∏µ",
    )

    with gr.Row():
        predict_btn = gr.Button("üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏ß‡∏ô‡πå", variant="primary")
        clear_btn = gr.ClearButton(value="‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

    output = gr.Textbox(
        label="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (Prediction Result)",
        interactive=False,
        lines=2,
        show_copy_button=True,
    )

    with gr.Accordion("üìò ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏Ñ‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ß‡∏ô‡πå (Feature Descriptions)", open=False):
        gr.Markdown(
            """
            - **Fixed Acidity:** ‡∏Å‡∏£‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏∞‡πÄ‡∏´‡∏¢ ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡∏ô‡πå‡∏°‡∏µ‡∏£‡∏™‡∏™‡∏°‡∏î‡∏∏‡∏•  
            - **Volatile Acidity:** ‡∏´‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡∏ô‡πå‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ô‡πâ‡∏≥‡∏™‡πâ‡∏°‡∏™‡∏≤‡∏¢‡∏ä‡∏π  
            - **Citric Acid:** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡∏ô‡πå  
            - **Residual Sugar:** ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏±‡∏Å ‡∏¢‡∏¥‡πà‡∏á‡∏°‡∏≤‡∏Å‡πÑ‡∏ß‡∏ô‡πå‡∏à‡∏∞‡∏¢‡∏¥‡πà‡∏á‡∏´‡∏ß‡∏≤‡∏ô  
            - **Chlorides:** ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏Å‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡πÑ‡∏ß‡∏ô‡πå  
            - **Free/Total Sulfur Dioxide:** ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏π‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏ö‡∏¢‡∏±‡πâ‡∏á‡∏à‡∏∏‡∏•‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏¢‡πå  
            - **Density:** ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ß‡∏ô‡πå (‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ô‡πâ‡∏≥)  
            - **pH:** ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏î-‡∏î‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ß‡∏ô‡πå  
            - **Sulphates:** ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ß‡∏ô‡πå  
            - **Alcohol:** ‡∏î‡∏µ‡∏Å‡∏£‡∏µ‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå‡πÉ‡∏ô‡πÑ‡∏ß‡∏ô‡πå  
            """
        )

    gr.HTML(
        "<p style='text-align:center;color:grey;font-size:0.8em;'>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ Grandeur Wine AI ‚Äî ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ Random Forest (Decision Trees Ensemble)</p>"
    )

    predict_btn.click(fn=predict_quality, inputs=inputs_list, outputs=output)
    clear_btn.add(inputs_list + [output])

# -------------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
# -------------------------------
if __name__ == "__main__":
    demo.launch()
