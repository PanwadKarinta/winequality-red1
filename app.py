import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
import gradio as gr
import os

# -------------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Decision Tree
# -------------------------------
model_accuracy = 0.0
best_params = {}
history_file = "wine_history.csv"

try:
    df = pd.read_csv("winequality-red.csv")
    df["quality_label"] = df["quality"].apply(lambda v: 1 if v >= 7 else 0)

    X = df.drop(["quality", "quality_label"], axis=1)
    y = df["quality_label"]

    FEATURE_COLUMNS = list(X.columns)
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    X_train, X_test, y_train, y_test = train_test_split(
        X_scaled, y, test_size=0.1, random_state=42, stratify=y
    )

    param_grid = {
        "criterion": ["gini", "entropy"],
        "max_depth": [5, 10, 15, None],
        "min_samples_split": [2, 5, 10],
        "min_samples_leaf": [1, 2, 4],
    }

    dt = DecisionTreeClassifier(random_state=42, class_weight="balanced")
    grid_search = GridSearchCV(dt, param_grid, cv=3, n_jobs=-1, verbose=1)
    grid_search.fit(X_train, y_train)

    model = grid_search.best_estimator_
    best_params = grid_search.best_params_

    predictions = model.predict(X_test)
    model_accuracy = accuracy_score(y_test, predictions)

except FileNotFoundError:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå winequality-red.csv")
    FEATURE_COLUMNS = [
        "fixed acidity", "volatile acidity", "citric acid", "residual sugar",
        "chlorides", "free sulfur dioxide", "total sulfur dioxide", "density",
        "ph", "sulphates", "alcohol"
    ]
    model = None
    scaler = None


# -------------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ + ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
# -------------------------------
def predict_quality(*features):
    """‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏ß‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    if model is None or scaler is None:
        return "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•", None

    try:
        features_dict = {col: val for col, val in zip(FEATURE_COLUMNS, features)}
        df_new = pd.DataFrame([features_dict])
        df_new = df_new[FEATURE_COLUMNS]
        scaled = scaler.transform(df_new)

        probs = model.predict_proba(scaled)[0]
        pred = np.argmax(probs)
        conf = probs[pred]

        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô)
        result_text = (
            f"üç∑ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢:\n\n"
            f"- ‡πÑ‡∏ß‡∏ô‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ (Good): {probs[1]*100:.2f}%\n"
            f"- ‡πÑ‡∏ß‡∏ô‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏î‡∏µ (Bad): {probs[0]*100:.2f}%\n\n"
            f"üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•: {'‚úÖ ‡πÑ‡∏ß‡∏ô‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ' if pred == 1 else '‚ö†Ô∏è ‡πÑ‡∏ß‡∏ô‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏î‡∏µ'}"
        )

        text_label = "‡πÑ‡∏ß‡∏ô‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ" if pred == 1 else "‡πÑ‡∏ß‡∏ô‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏î‡∏µ"

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        df_new["predicted_label"] = text_label
        df_new["prob_good"] = f"{probs[1]*100:.2f}%"
        df_new["prob_bad"] = f"{probs[0]*100:.2f}%"
        df_new["model_used"] = "Decision Tree"
        df_new["accuracy"] = f"{model_accuracy*100:.2f}%"

        if os.path.exists(history_file):
            df_old = pd.read_csv(history_file)
            df_all = pd.concat([df_old, df_new], ignore_index=True)
        else:
            df_all = df_new
        df_all.to_csv(history_file, index=False)

        return result_text, df_all.tail(10)

    except Exception as e:
        return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}", None


def clear_inputs():
    """‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥"""
    return [None] * len(FEATURE_COLUMNS)


# -------------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö Gradio
# -------------------------------
feature_translations = {
    "fixed acidity": "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏î‡∏Ñ‡∏á‡∏ó‡∏µ‡πà",
    "volatile acidity": "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏î‡∏£‡∏∞‡πÄ‡∏´‡∏¢",
    "citric acid": "‡∏Å‡∏£‡∏î‡∏ã‡∏¥‡∏ï‡∏£‡∏¥‡∏Å",
    "residual sugar": "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠",
    "chlorides": "‡∏Ñ‡∏•‡∏≠‡πÑ‡∏£‡∏î‡πå",
    "free sulfur dioxide": "‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏≠‡∏£‡πå‡πÑ‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏ã‡∏î‡πå‡∏≠‡∏¥‡∏™‡∏£‡∏∞",
    "total sulfur dioxide": "‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏≠‡∏£‡πå‡πÑ‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏ã‡∏î‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
    "density": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô",
    "ph": "‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏î-‡∏î‡πà‡∏≤‡∏á",
    "sulphates": "‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏ï",
    "alcohol": "‡∏î‡∏µ‡∏Å‡∏£‡∏µ‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå"
}

sample_good = [7.3, 0.65, 0.0, 1.2, 0.065, 15.0, 21.0, 0.9946, 3.39, 0.47, 10.0]
sample_bad = [6.0, 0.90, 0.00, 5.0, 0.10, 5.0, 15.0, 0.9970, 3.20, 0.40, 8.5]

with gr.Blocks(theme=gr.themes.Soft(primary_hue="rose", secondary_hue="rose")) as app:
    gr.HTML(
        """
        <div style='background-color:#1a001f;padding:20px;border-radius:15px;color:white;text-align:center'>
        <h1>üç∑ Grandeur Wine Analyzer</h1>
        <p>‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏ß‡∏ô‡πå‡∏î‡πâ‡∏ß‡∏¢ Decision Tree</p>
        </div>
        """
    )

    gr.HTML(
        f"<div style='text-align:center;color:#d8a3ff;'><h3>üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•: {model_accuracy*100:.2f}%</h3></div>"
    )

    inputs_list = [
        gr.Number(
            label=f"{col.replace('_', ' ').title()} ({feature_translations.get(col, '')})",
            precision=3,
        )
        for col in FEATURE_COLUMNS
    ]

    gr.Examples(
        examples=[sample_good, sample_bad],
        inputs=inputs_list,
        label="üìç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏ß‡∏ô‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ / ‡πÑ‡∏ß‡∏ô‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏î‡∏µ",
    )

    with gr.Row():
        predict_btn = gr.Button("üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏ß‡∏ô‡πå", variant="primary")
        clear_btn = gr.Button("üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å")

    output_text = gr.Textbox(
        label="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (Prediction Result)",
        interactive=False,
        lines=6,
        show_copy_button=True,
    )

    history_output = gr.Dataframe(
        headers=FEATURE_COLUMNS + ["predicted_label", "prob_good", "prob_bad", "model_used", "accuracy"],
        label="üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
        interactive=False
    )

    predict_btn.click(
        fn=predict_quality,
        inputs=inputs_list,
        outputs=[output_text, history_output]
    )

    clear_btn.click(fn=clear_inputs, inputs=None, outputs=inputs_list)

    with gr.Accordion("üìò ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏Ñ‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ß‡∏ô‡πå", open=False):
        gr.Markdown(
            """
            - **Fixed Acidity:** ‡∏Å‡∏£‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏∞‡πÄ‡∏´‡∏¢  
            - **Volatile Acidity:** ‡∏´‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡∏ô‡πå‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ô‡πâ‡∏≥‡∏™‡πâ‡∏°‡∏™‡∏≤‡∏¢‡∏ä‡∏π  
            - **Citric Acid:** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡∏ô‡πå  
            - **Residual Sugar:** ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏±‡∏Å  
            - **Chlorides:** ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏Å‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡πÑ‡∏ß‡∏ô‡πå  
            - **Free/Total Sulfur Dioxide:** ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏π‡∏î‡πÄ‡∏™‡∏µ‡∏¢  
            - **Density:** ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ß‡∏ô‡πå  
            - **pH:** ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏î-‡∏î‡πà‡∏≤‡∏á  
            - **Sulphates:** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏á‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡πÑ‡∏ß‡∏ô‡πå  
            - **Alcohol:** ‡∏î‡∏µ‡∏Å‡∏£‡∏µ‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå‡πÉ‡∏ô‡πÑ‡∏ß‡∏ô‡πå  
            """
        )

    gr.HTML(
        "<p style='text-align:center;color:grey;font-size:0.8em;'>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ Grandeur Wine AI ‚Äî ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ Decision Tree</p>"
    )

# -------------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Render)
# -------------------------------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 7860))
    app.launch(server_name="0.0.0.0", server_port=port)
